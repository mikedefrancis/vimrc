" ============ WARPCORE VIMRC ===========
" @Description
" WARPCORE is a heavily edited vim configuration.
"
" WARNING: You MUST add the following line to THE END of your .bashrc (or .zshrc). Note
" that my install scripts attempt to add this line to your .bashrc for you automatically.:
"     stty -ixon
"
" CUSTOM KEY MAPPING:
" CONTROL KEY MAPPING:
" C-q: save and quit
" C-w: Left/Right Split
" C-e: Open a new terminal
" C-r: Redo
" C-t: Find and replace
" C-y: Top/Bottom Split
" C-a: Normal mode
" C-s: Save
" C-d: Delete
" C-f: Find in file
" C-g: Start/stop recording macro
" C-h: Jump left
" C-j: Jump down
" C-k: Jump up
" C-l: Jump right
" C-z: Undo
" C-x: Cut
" C-c: Copy
" C-v: Paste
" C-b: Search for file name in open buffers
" C-m: search marks
" Ctrl+{h,j,k,l}: go left, down, up, right by 3 lines at a time
" Ctrl+Left: go to window to the Left (requires easymotion plugin)
" Ctrl+Right:go to window to the Right(requires easymotion plugin)
" Ctrl+Up:   go to window to the Up   (requires easymotion plugin)
" Ctrl+Down: go to window to the Down (requires easymotion plugin)
" Ctrl+h   goto tab to the left
" Ctrl+l   goto tab to the right
"
" SHIFT KEY REMAPPING:
" S-`: Drop Nexus file to current path or open if existing
" S-1: Set mark 1
" S-2: Set mark 2
" S-3: Set mark 3
" S-4: Set mark 4
" S-5: Set mark 5
" S-6: Set mark 6
" S-7: Set mark 7
" S-8: Set mark 8
" S-9: Set mark 9
" S-0: Set mark 10
" S-q: command
" S-w: set vim path to match current file
" S-p: set vim colors
" S-e: :edit
" S-r: copy line to register # We could change this one
" S-t: todo.txt
" S-y: git diff current file
" S-a: back
" S-s: forward
" S-d: fuzzy file search from current directory
" S-f: ripgrep search in files
" S-g: execute recorded macro
" S-z: fuzzy file search from vim file history
" S-x: Rotate through all of the tabs
" S-c: FZF through git changes (git status)
" S-v: Enter visual mode
" S-b: Create a new tab
" S-n: go to previous search result in file
" S-i:  toggle search highlight
" S-Tab: unindent (visual mode)
"
" Find Text:
" OTHER MAPPINGS FOR NORMAL MODE:
" a              insert mode
" i              show whitespace characters
" cd             change directory using :cd command
" gs             goto start of line and enter insert mode
" cw             change word under cursor
" ci{'"{[(}      change inside quotes/braces/etc.
" dd             cut line
" yy             do yapf formatting of the current file
" de             cut to end of current line
" dw             delete word under cursor
" mm             view man page
" bb             convert the loaded file to hex
" n/S-n: next/previous search result in file
" gg: search through commit history tree graph
" gf: search through commit history of current file
" fd: fzf search for text in all open buffers
" fg: search the search history
" fc: search the command history
" ff: search for text in file using builtin / method
" fh: find and highlight matching words under the cursor
" ``: goto current nexus and set it as the workign directory
" cc: show current working directory
" cv: show full path to current file
" gt: goto top of file
" gb: goto bottom of file
" ge: goto the end of the current line and enter insert mode
" rr: paste contents stored to r register (stored via S-r)
" Space toggle center-scroll (normal mode)
" ;     Enter command mode (:<command)
" '     Run external command (:!<command>)
" ,     Leader
" ,c<Space> Toggle comment/uncomment selected line(s)
"
" STANDARD VIM COMMAND REFERENCE:
"  w/W       goto start of next word
"  e/E       goto end of next word
"  b/B       goto start of previous word
"  v         enter visual mode
"  V         enter visual line mode
"  :<number> goto line number
"  :Delete   delete file in buffer
"  :SudoEdit edit a file using sudo
"  :Find     use find and output results to quickfix window
"  :Chmod    change the permission of the current file
"
" PLUGINS:
"   I am using Vundle to install my plugins
" ______________________________________________________________ "
" ==== PLUGINS ====
set nocompatible
filetype off
set exrc

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" All plugins using vundle
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdcommenter'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-fugitive'
Plugin 'lambdalisue/vim-manpager'

" More fuzzy file search because more is better
" FZF is by far my favorite plugin
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
" This can be used in place of fzf when you don't have fzf
" Plugin 'kien/ctrlp.vim'
" this is very important if using ctrlp
" let g:ctrlp_map = 'fd'

" ==== COOLOR THEMES ====
Plugin 'tomasr/molokai'
" ==== END PLUGIN THEMES ====

call vundle#end()
filetype plugin indent on

" PLUGIN CONFIGURATIONS...
colorscheme molokai

" ==== Easymotion ====
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
" nmap f <Plug>(easymotion-s)

nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>
inoremap <silent> <C-Up> <ESC>:wincmd k<CR>
inoremap <silent> <C-Left> <ESC>:wincmd h<CR>
inoremap <silent> <C-Down> <ESC>:wincmd j<CR>
inoremap <silent> <C-Right> <ESC>:wincmd l<CR>
nnoremap <silent> <C-Up> <ESC>:wincmd k<CR>
nnoremap <silent> <C-Left> <ESC>:wincmd h<CR>
nnoremap <silent> <C-Down> <ESC>:wincmd j<CR>
nnoremap <silent> <C-Right> <ESC>:wincmd l<CR>

"NERDCOMMENTER
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" ==== END PLUGINS ====


" ______________________________________________________________ "
" ==== PROPERTIES/SETTINGS ====
set shell=/usr/bin/zsh

" colorscheme solarized
syntax enable

"trying some new settings
set colorcolumn=81
set textwidth=79
set formatoptions+=t
set encoding=utf8
set ffs=unix,dos,mac
set nowb
set showmatch
set lazyredraw
set noerrorbells
set novisualbell
set ai
set si
set wrap
" set wildmode
set expandtab
set background=dark
set guifont=Monospace\ 10
set fillchars+=vert:\$
set ruler
set hidden
set number
set laststatus=2
set smartindent
set st=4 sw=4 et
set shiftwidth=4
set tabstop=4
set softtabstop=4
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar
set viminfo='100,<50,s10,h

" I AM COMMENTING OUT THIS LINE BECAUSE I WANT USER TO DECIDE SIZE OF VIM WINDOW
":set lines=999 columns=999
set history=10000
set undolevels=1000
set title
set nobackup
" make all / searches use smart case sensitivity
set ignorecase smartcase
set incsearch
set autoindent smartindent

" DANGERWILLROBINSON
set noswapfile

" maybe move these somewhere else
let g:ackhighlight = 1
let g:ackpreview = 1

" colon = semicolon
nnoremap ; :
" leader key is comma
let mapleader=","

" ==== END PROPERTIES/SETTINGS ====
" ______________________________________________________________ "
" ==== KEY BINDINGS ====

" automatically delete trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e
autocmd FileType man only

" run yapf formatting on the current file
nnoremap yy :silent !yapf -i %<CR>:edit!<CR>
" automatically format python files on safe to comply with yapf
" autocmd BufWritePre *.py execute ':silent !yapf -i %'

"===========
"""" BASICS (KNOW ALL OF THESE)
nnoremap a <ESC>i
inoremap <C-a> <ESC>:echo "-- NORMAL --"<ESC>l
nnoremap <C-a> <ESC>:echo "-- NORMAL --"<ESC><ESC>l
vnoremap <C-a> <ESC>:echo "-- NORMAL --"<ESC>l
cnoremap <C-a> <ESC>:echo "-- NORMAL --"<C-c><ESC><ESC>l
" FIND
nnoremap ff /
" search for word under cursor with ff
nnoremap fh gd
vnoremap ?? *
" nnoremap fd gd
nnoremap <C-d> <Delete>
inoremap <C-d> <Delete>
vnoremap <C-d> <Delete>
cnoremap <C-d> <Delete>
" EDIT AND DELETE
nnoremap <S-e> <ESC>:tabedit<CR>
vnoremap <S-e> <ESC>:tabedit<CR>
cnoremap <S-e> <ESC>:tabedit<CR>
" SAVE AND QUIT
nnoremap <C-q> <ESC>:x!<CR>
inoremap <C-q> <ESC>:x!<CR>
vnoremap <C-q> <ESC>:x!<CR>
cnoremap <C-q> <ESC>:x!<CR>
tnoremap <C-q> <ESC>:x!<CR>
nnoremap <C-s> <ESC>:w<CR>
inoremap <C-s> <ESC>:w<CR>l
vnoremap <C-s> <ESC>:w<CR>
cnoremap <C-s> <ESC>:w<CR>
tnoremap <C-s> <ESC>:w<CR>
" UNDO AND REDO
inoremap <C-z> <ESC>:undo<CR>
nnoremap <C-z> <ESC>:undo<CR>
vnoremap <C-z> <ESC>:undo<CR>
cnoremap <C-z> <ESC>:undo<CR>
nnoremap <C-r> <ESC>:redo<CR>
inoremap <C-r> <ESC>:redo<CR>
vnoremap <C-r> <ESC>:redo<CR>
cnoremap <C-r> <ESC>:redo<CR>



""============SYSTEM CLIPBOARD AND FRIENDS===========
" COPY, CUT, PASTE, REDO, UNDO
"using control +z, x, c, v, r for undo, cut, copy, paste, redo
"like all other programs
"note that for copy paste compatibility with other editors is broken
"because vim uses yank instead of copy
"also note that you need to be in visual mode to block copy
"
"" Use system clipboard by default
set clipboard=unnamedplus
" Mappings for easier manual control (optional but nice)
 " Ctrl-c to copy selected text       " Ctrl-v to paste in insert mode
vnoremap <C-c> "+y
" Ctrl-c to copy current line
nnoremap <C-c> "+yy
" Ctrl-v to paste in normal mode
nnoremap <C-v> "+p
" Ctrl-v to paste in insert mode
inoremap <C-v> <C-r>+
" Ctrl-v to paste in command mode
cnoremap <C-v> <C-r>+
"" Cut selected text (Visual mode) to clipboard with Ctrl-x
vnoremap <C-x> "+d
" Cut current line (Normal mode) to clipboard with Ctrl-x
nnoremap <C-x> "+dd
"
"
""" OLD DEPRECATED HACKS:
" vnoremap <C-c> y'] `]
" nnoremap <C-c> <Home>y$
" inoremap <C-c> <ESC><Home>y$i
" " set pastetoggle=<C-u>
" "TODO: CHANGE FIX PASTE MODE VERSIONS OF OTHER THINGS
" inoremap <C-v> <ESC>:set paste<CR><ESC>pi<Right><ESC>:set nopaste<CR>a
" nnoremap <C-v> <ESC>:set paste<ESC>P<ESC>:set nopaste<CR>
" vnoremap <C-v> <ESC>:set paste<ESC>Pv<ESC>:set nopaste<CR>
" vnoremap <C-x> d
" nnoremap <C-x> <Home>d$
""============END CLIPBOARD AND FRIENDS===========


"===========
"""" MOVEMENT
" arrow keys
nnoremap <silent> <A-Up> 128<Up>
nnoremap <silent> <A-Down> 128<Down>
vnoremap <silent> <A-Up> 128<Up>
vnoremap <silent> <A-Down> 128<Down>
inoremap <silent> <A-Up> <ESC>128<Up>i
inoremap <silent> <A-Down> <ESC>128<Down>i
nnoremap <silent> <S-Up> 10<Up>
nnoremap <silent> <S-Down> 10<Down>
inoremap <silent> <S-Up> <ESC>10<Up>i
inoremap <silent> <S-Down> <ESC>10<Down>i
nnoremap <silent> <A-PageUp> 4<PageUp>
nnoremap <silent> <A-PageDown> 4<PageDown>
vnoremap <silent> <A-PageUp> 4<PageUp>
vnoremap <silent> <A-PageDown> 4<PageDown>
inoremap <silent> <A-PageUp> 4<PageUp>
inoremap <silent> <A-PageDown> 4<PageDown>

" tab switch (not using)
" vnoremap <C-h> <ESC>gT
" nnoremap <C-h> <ESC>gT
" vnoremap <C-l> <ESC>gt
" nnoremap <C-l> <ESC>gt
vnoremap <C-h> :wincmd h<CR>
nnoremap <C-h> :wincmd h<CR>
cnoremap <C-h> :wincmd h<CR>
vnoremap <C-l> :wincmd l<CR>
nnoremap <C-l> :wincmd l<CR>
cnoremap <C-l> :wincmd l<CR>

" Ctrl nav
vnoremap <C-j> 64j
nnoremap <C-j> 64j
vnoremap <C-k> 64k
nnoremap <C-k> 64k

" Shift nav
vnoremap <S-j> 8j
nnoremap <S-j> 8j
vnoremap <S-k> 8k
nnoremap <S-k> 8k

vnoremap <S-l> 8l
nnoremap <S-l> 8l
vnoremap <S-h> 8h
nnoremap <S-h> 8h

"===========
" FILE // WINDOW NAVIGATION
" windows and tabs
nnoremap <C-w> <ESC>:vsplit<CR><ESC>:wincmd l<CR>
vnoremap <C-w> <ESC>:vsplit<CR><ESC>:wincmd l<CR>
nnoremap <C-y> <ESC>:split<CR><ESC>:wincmd j<CR>
vnoremap <C-y> <ESC>:split<CR><ESC>:wincmd j<CR>
"tabs
nnoremap <S-b> <ESC>:terminal<CR>
vnoremap <S-b> <ESC>:terminal<CR>
nnoremap <C-b> <ESC>:Buffers<CR>
vnoremap <C-b> <ESC>:Buffers<CR>

nnoremap <C-m> <ESC>:Marks<CR>
" prev and next location
nnoremap <S-a> <C-o>
nnoremap <S-s> <Tab>

"===========
" LINE MANIPULATIONS
" delete to end of line with de
nnoremap de d$
" indent things with tab in visual mode
vnoremap <Tab>   >><ESC>gv
vnoremap <S-Tab> <<<ESC>gv
" OVERRIDE STANDARD G KEY MOVEMENT BECAUSE I LIKE THIS FUNCTIONALITY MORE
" making it slightly easier to go to the start and end of real text in a line
" (ignore whitespace)
nnoremap ge g_
" nnoremap gl _
nnoremap gs _
" nnoremap gs 0i
nnoremap gf -
nnoremap ga g_<ESC>:echo "-- INSERT --"<ESC>a<Right>
vnoremap ge g_
vnoremap gs _
vnoremap gf -
" CHANGE IN WORD
nnoremap cw ciw
" make yanking a bit easier
" nnoremap yw yiw
" nnoremap yl yy

nnoremap <C-o> <ESC>:call ToggleLines()<CR>
inoremap <C-o> <ESC>:call ToggleLines()<CR>
vnoremap <C-o> <ESC>:call ToggleLines()<CR>
" toggle mouse
" nnoremap <C-t> <ESC>:call ToggleMouse()<CR>
" vnoremap <C-t> <ESC>:call ToggleMouse()<CR>
" CHANGE BACKGROUND COLOR WITH SHIFT P
nnoremap <S-p> <ESC>:Colors<CR>
"toggle whitespace chars with i
nnoremap i <ESC>:set list!<CR>

"===========
" WILL ROBINSON'S SPECIAL UTILITIES
" #1 KAPPA BUFFER SPECIAL COPY PASTE
" adding easy use of an additional copy and paste buffer
" so that I can cut and paste things around without blowing away
" all of that good stuff that I found somewhere to insert
" [kappa] buffer
" nnoremap cp <Home>"ky$<ESC>:echo "copied line to p register"<CR>
" vnoremap cp "ky<ESC>:echo "copied selection to p register"<CR>
" inoremap <C-p> <ESC>"kpi<Right><ESC>:echo "pasted contents from p register"<CR>
" vnoremap <C-p> "kp<Right><ESC>:echo "pasted contents from p register"<CR>
" nnoremap <C-p> "kp<Right><ESC>:echo "pasted contents from p register"<CR>

" FIND AND REPLACE WITHIN FILE
nnoremap <C-t> <ESC>:%s/<find>/<replace>/gc
vnoremap <C-t> <ESC>:%s/<find>/<replace>/gc
" This is a really fun hack. If you don't have write permissions hit this hotkey
" nnoremap <S-o> <ESC>:w !sudo tee %<CR>

" SEARCH HIGHLIGHT
let hlstate=0
nnoremap <S-i> :if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=hlstate+1<CR><ESC>:echo "toggle search highlight"<CR>
set hlsearch

" toggle auto scroll using space key
let scrollstate=1
nnoremap <Space> :if (scrollstate%2 == 0) \| set scrolloff=999 \| else \| set scrolloff=0 \| endif \| let scrollstate=scrollstate+1<CR><ESC>:echo "toggle center scroll"<CR>
set scrolloff=999

" change current directory
nnoremap cd <ESC>:cd<Space>

"""""""""""""""""""""""""""""""""""
" STARCRAFT-STYLE CONTROL GROUPS
" goto current nexus file
nnoremap `` 'A<ESC>:cd %:p:h<CR><ESC>:echo expand('%:p')<CR>

" create a new nexus file
function! DropNexus()
  let l:filepath = expand('%:p:h') . '/nexus.md'

  :echo l:filepath
  let l:answer = input("Set nexus mark here? (y/n): ")
  if l:answer ==# 'y'
    if filereadable(l:filepath)
      " File exists, just open it
      execute 'edit' fnameescape(l:filepath)
    else
      " File doesn't exist, create it
      call writefile([], l:filepath)
      :echo "\nDropped Nexus"
      execute 'edit' fnameescape(l:filepath)
    endif
    :echo "\nNexus Warped."
    :cd %:p:h
    mark A
    :echo expand('%:p')
  else
    echo "\nNexus not Warped."
  endif
endfunction

" Optional: Map it to a key, like <leader>nx
nnoremap ~ :call DropNexus()<CR>

nnoremap 11 'S<ESC>:echo expand('%:p')<CR>
nnoremap 22 'D<ESC>:echo expand('%:p')<CR>
nnoremap 33 'F<ESC>:echo expand('%:p')<CR>
nnoremap 44 'G<ESC>:echo expand('%:p')<CR>
nnoremap 55 'H<ESC>:echo expand('%:p')<CR>
nnoremap 66 'J<ESC>:echo expand('%:p')<CR>
nnoremap 77 'K<ESC>:echo expand('%:p')<CR>
nnoremap 88 'L<ESC>:echo expand('%:p')<CR>
nnoremap 99 'Z<ESC>:echo expand('%:p')<CR>
nnoremap 00 'X<ESC>:echo expand('%:p')<CR>

nnoremap ! <ESC>mS<ESC>:echo "mapped bookmark 1"<CR>
nnoremap @ <ESC>mD<ESC>:echo "mapped bookmark 2"<CR>
nnoremap # <ESC>mF<ESC>:echo "mapped bookmark 3"<CR>
nnoremap $ <ESC>mG<ESC>:echo "mapped bookmark 4"<CR>
nnoremap % <ESC>mH<ESC>:echo "mapped bookmark 5"<CR>
nnoremap ^ <ESC>mJ<ESC>:echo "mapped bookmark 6"<CR>
nnoremap & <ESC>mK<ESC>:echo "mapped bookmark 7"<CR>
nnoremap * <ESC>mL<ESC>:echo "mapped bookmark 8"<CR>
nnoremap ( <ESC>mZ<ESC>:echo "mapped bookmark 9"<CR>
nnoremap ) <ESC>mX<ESC>:echo "mapped bookmark 10"<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"ignore q keypress in normal mode if not used with other keys
nnoremap q <ESC>

" prompt
nnoremap <S-q> <ESC>:

" set current directory to that of the currently open file
nnoremap <S-w> <ESC>:cd %:p:h<CR><ESC>:echo "SET WORKING DIR TO " . expand('%:p')<CR>

" run terminal inside of vim for quick things.. autoset dir to current
" nnoremap <C-e> <ESC>:cd %:p:h<ESC>:vertical terminal<CR>
nnoremap <C-e> <ESC>:edit<Space>


" NEW AND IMPROVED REG BUFFER
nnoremap <S-r> <Home>"ky$<ESC>:echo "copied line to r register"<CR>
vnoremap <S-r> "ky<ESC>:echo "copied selection to r register"<CR>
vnoremap rr <ESC>:set paste<CR>"kP<ESC>:set nopaste<CR>
nnoremap rr <ESC>:set paste<CR>"kP<ESC>:set nopaste<CR>

" todo file
nnoremap <S-t> <ESC>:edit ~/.todo.md<CR>

" show side by side git diff within vim
nnoremap <S-y> <ESC>:Gdiffsplit<CR>

" temporary scratch file
nnoremap <C-n> <ESC>:edit ~/.nonono.md<CR>

"MACRO HOTKEY
" toggle start/stop recording
nnoremap <C-g> qg
" replay recorded macro
nnoremap <S-g> @g

" execute shell command
nnoremap ' <ESC>:!

" Note that the following gg and G are remapped later in this, but work for go
" top and go bottom listed below.
nnoremap gt gg
nnoremap gb G

" FZF SEARCH!
nnoremap <S-d> <ESC>:Files<CR>'

" TABS
nnoremap <S-z> <ESC>:tabnext<CR>

"FZF File History
nnoremap <S-x> <ESC>:History<CR>'

"FZF Git Status
nnoremap <S-c> <ESC>:GFiles?<CR>

nnoremap <C-f> <ESC>:BLines<CR>'
nnoremap fd <ESC>:Lines<CR>'
nnoremap fg <ESC>:History/<CR>'
nnoremap fc <ESC>:History:<CR>'

nnoremap gg <ESC>:Commits<CR>'
nnoremap gf <ESC>:BCommits<CR>'

" RIPGREP SEARCH!
nnoremap <S-f> <ESC>:RG<CR>

" show current directory
nnoremap cv <ESC>:echo expand('%:p')<CR>
nnoremap cc <ESC>:pwd<CR>

" NOT SURE IF I WANT THIS.
" TERMINAL FROM WITHIN VIM
tnoremap <Esc> <C-\><C-n>
tnoremap <C-a> <C-\><C-n>

nnoremap pp <ESC>:Files<CR>
"GREATER THINGS

" some cool server thing probably slows things down
"com! -complete=file -nargs=* Edit silent! exec "!vim --servername " . v:servername . " --remote-tab-silent <args>"

"Toggle Hexmode Fun
nnoremap <S-m> <ESC>:Man<Space>
nnoremap mm <ESC>:Man<Space>

nnoremap bb <ESC>:Hexmode<CR>

" ex command for toggling hex mode - define mapping if desired
command! -bar Hexmode call ToggleHex()

" FUNCTIONS:
function! ToggleBackground()
    if &background == "dark"
        set background=light
    else
        set background=dark
    endif
endfunction

function! ToggleMouse()
    if &mouse == 'a'
        set mouse=
    else
        set mouse=a
    endif
endfunc

function! ToggleLines()
    set invnumber
endfunc

" helper function to toggle hex mode
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    silent :e " this will reload the file without trickeries
              "(DOS line endings will be shown entirely )
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" vim -b : edit binary using xxd-format!
augroup Binary

  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
  "elf files
  au BufReadPre  *.elf let &bin=1
  au BufReadPost *.elf if &bin | %!xxd
  au BufReadPost *.elf set ft=xxd | endif
  au BufWritePre *.elf if &bin | %!xxd -r
  au BufWritePre *.elf endif
  au BufWritePost *.elf if &bin | %!xxd
  au BufWritePost *.elf set nomod | endif
augroup END

set secure

